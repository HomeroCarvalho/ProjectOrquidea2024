public class Ship{ 

	// imagem do ship.
	public Imagem imageShip;
	
	public int idImagem;
	
	// coordenada x de posicao.
	public double xxImage;

	// coordenada y de posicao.
	public double yyImage;
	
	// variavel de inversao de direcao do movimento de ship.
	public double direcao;
	



	// construtor. carrega a imagem do ship, e seta as coordenadas iniciais de desenho da imagem do ship.
	public Ship(string pathFileImage, double xEntity2, double yEntity2){
	
		// coordenadas do ship na tela.
		xxImage = xEntity2;
		yyImage = yEntity2;
		
		// imagem e id da imagem do ship.
		imageShip = create(pathFileImage);
		idImagem = imageShip.GetID();
	
	
		// direção do ship.
		direcao= -1.0;
	}; 
	
	
		
	// atualiza a situação do Entity. movimento indo em uma direção, até uma das bordas, em seguida inversão da direção do movimento até atingir outra borda.
	public UpdateShip()
	{	
		
		
		if (xxImage > 800.0){
			direcao= -1.0;
		};
	
		if (xxImage < 0.0){
			direcao= 1.0;
		};
		
		
		
		xxImage= xxImage + direcao*6.0;
	};
		
		
		
		
	public DrawShip(LoopGame ls, int id)
	{
		// temporariamente desenhando a mesma textura. alterar id=0, para o id da imagem do entity currente. [idImagem]
		ls.Draw(id, xxImage,  yyImage);
	};

	
 };




// instancia o loop do game.
LoopGame loopX= create(900,600,"esboco space invaders");
loopX.SetFps(350);


// cria ships invader.
Ship invader1= create("programa jogos\assets space invaders\invader1.png", 100.0,100.0);
Ship invader2= create("programa jogos\assets space invaders\invader2.png", 480.0,100.0);
Ship invader3= create("programa jogos\assets space invaders\invader3.png", 000.0,100.0);
Ship invader4= create("programa jogos\assets space invaders\invader3.png", 080.0,100.0);
Ship invader5= create("programa jogos\assets space invaders\invader3.png", 0300.0,100.0);



Ship[] naves[20];
naves[0]= invader1;
naves[1]= invader2;
naves[2]= invader3;
naves[3]= invader4;
naves[4]= invader5;




int continua=0;
int i;



// loop de iteração do jogo.
while  (continua<1){
	
	loopX.dispachEvents();
	
	// processamento de desenhos.
	loopX.BeginDraw();


	
	
	
	for (int i=0;i<5;i++)
	{
		naves[i].UpdateShip();      
		naves[i].DrawShip(loopX,2); 
	
	};
	
	
	loopX.EndDraw();


	
	continua= loopX.isOpen();
	
};


